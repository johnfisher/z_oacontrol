<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE svg PUBLIC "-_W3C_DTD SVG 1.0_EN" "http://www.w3.org/TR/SVG/DTD/svg10.dtd" >
<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'
   onload='Init(evt)'>

   <title>Tooltips</title>

   <desc>
      Simple SVG tooltip that shows the 'title' and 'desc' of a moused-over element; if no 'title' exists, 'desc' will become head of tooltip; if neither exists, 'id' will be displayed; if no 'title', 'desc', nor 'id' tooltip will not appear. Adjusts for zooming and panning.
   </desc>

   <script type="text/ecmascript"><![CDATA[
      var SVGDocument = null;
      var SVGRoot = null;
      var SVGViewBox = null;
      var svgns = 'http://www.w3.org/2000/svg';
      var xlinkns = 'http://www.w3.org/1999/xlink';
      var toolTip = null;
      var TrueCoords = null;
      var tipBox = null;
      var tipText = null;
      var tipTitle = null;
      var tipDesc = null;

      var lastElement = null;
      var titleText = '';
      var titleDesc = '';


      function Init(evt)
      {
         SVGDocument = evt.target.ownerDocument;
         SVGRoot = SVGDocument.documentElement;
         TrueCoords = SVGRoot.createSVGPoint();

         toolTip = SVGDocument.getElementById('ToolTip');
         tipBox = SVGDocument.getElementById('tipbox');
         tipText = SVGDocument.getElementById('tipText');
         tipTitle = SVGDocument.getElementById('tipTitle');
         tipDesc = SVGDocument.getElementById('tipDesc');
         //window.status = (TrueCoords);

         //create event for object
         SVGRoot.addEventListener('mousemove', ShowTooltip, false);
         SVGRoot.addEventListener('mouseout', HideTooltip, false);
      };


      function GetTrueCoords(evt)
      {
         // find the current zoom level and pan setting, and adjust the reported
         //    mouse position accordingly
         var newScale = SVGRoot.currentScale;
         var translation = SVGRoot.currentTranslate;
         TrueCoords.x = (evt.clientX - translation.x)/newScale;
         TrueCoords.y = (evt.clientY - translation.y)/newScale;
      };


      function HideTooltip( evt )
      {
         toolTip.setAttributeNS(null, 'visibility', 'hidden');
      };


      function ShowTooltip( evt )
      {
         GetTrueCoords( evt );

         var tipScale = 1/SVGRoot.currentScale;
         var textWidth = 0;
         var tspanWidth = 0;
         var boxHeight = 20;

         tipBox.setAttributeNS(null, 'transform', 'scale(' + tipScale + ',' + tipScale + ')' );
         tipText.setAttributeNS(null, 'transform', 'scale(' + tipScale + ',' + tipScale + ')' );

         var titleValue = '';
         var descValue = '';
         var targetElement = evt.target;
         if ( lastElement != targetElement )
         {
            var targetTitle = targetElement.getElementsByTagName('title').item(0);
            if ( targetTitle )
            {
               // if there is a 'title' element, use its contents for the tooltip title
               titleValue = targetTitle.firstChild.nodeValue;
            }

            var targetDesc = targetElement.getElementsByTagName('desc').item(0);
            if ( targetDesc )
            {
               // if there is a 'desc' element, use its contents for the tooltip desc
               descValue = targetDesc.firstChild.nodeValue;

               if ( '' == titleValue )
               {
                  // if there is no 'title' element, use the contents of the 'desc' element for the tooltip title instead
                  titleValue = descValue;
                  descValue = '';
               }
            }

            // if there is still no 'title' element, use the contents of the 'id' attribute for the tooltip title
            if ( '' == titleValue )
            {
               titleValue = targetElement.getAttributeNS(null, 'id');
            }

            // selectively assign the tooltip title and desc the proper values,
            //   and hide those which don't have text values
            //
            var titleDisplay = 'none';
            if ( '' != titleValue )
            {
               tipTitle.firstChild.nodeValue = titleValue;
               titleDisplay = 'inline';
            }
            tipTitle.setAttributeNS(null, 'display', titleDisplay );


            var descDisplay = 'none';
            if ( '' != descValue )
            {
               tipDesc.firstChild.nodeValue = descValue;
               descDisplay = 'inline';
            }
            tipDesc.setAttributeNS(null, 'display', descDisplay );
         }

         // if there are tooltip contents to be displayed, adjust the size and position of the box
         if ( '' != titleValue )
         {
            var xPos = TrueCoords.x + (10 * tipScale);
            var yPos = TrueCoords.y + (10 * tipScale);

            //return rectangle around text as SVGRect object
            var outline = tipText.getBBox();
            tipBox.setAttributeNS(null, 'width', Number(outline.width) + 10);
            tipBox.setAttributeNS(null, 'height', Number(outline.height) + 10);

            // update position
            toolTip.setAttributeNS(null, 'transform', 'translate(' + xPos + ',' + yPos + ')');
            toolTip.setAttributeNS(null, 'visibility', 'visible');
         }
      };

   ]]></script>

   <rect x='0' y='0' width='100%' height='100%' fill='white'/>

   <circle cx='25' cy='25' r='20' fill='orange'>
      <title>Circle</title>
      <desc>An orange circle</desc>
   </circle>

   <ellipse cx='125' cy='25' rx='30' ry='20' fill='black'>
      <title>Ellipse</title>
      <desc>A black ellipse</desc>
   </ellipse>

   <rect x='5' y='105' width='40' height='40' fill='green'>
      <title>Rect</title>
      <desc>A green rectangle</desc>
   </rect>

   <rect x='105' y='105' width='40' height='40' rx='5' ry='5' fill='blue'>
      <desc>A blue rectangle with rounded corners</desc>
   </rect>

   <polygon points='62.5,50 90,50 102.5,72.75 90,95.5 62.5,95.5 50,72.75' fill='violet'/>

   <polygon points='75,140 100,185 50,185' fill='red'>
      <title>Triangle</title>
   </polygon>

   <polygon id='star' fill='gold' points='75,203 79.5,212 90,213 82,221 84,231 75,226 66,231 68,221 60,213 70.5,212'/>

   <g id='ToolTip' opacity='0.8' visibility='hidden' pointer-events='none'>
      <rect id='tipbox' x='0' y='5' width='88' height='20' rx='2' ry='2' fill='white' stroke='black'/>
      <text id='tipText' x='5' y='20' font-family='Arial' font-size='12'>
         <tspan id='tipTitle' x='5' font-weight='bold'><![CDATA[]]></tspan>
         <tspan id='tipDesc' x='5' dy='15' fill='blue'><![CDATA[]]></tspan>
      </text>
   </g>
</svg>